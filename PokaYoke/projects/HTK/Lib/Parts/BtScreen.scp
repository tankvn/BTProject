#pushdefine

#insert "\Lib\Parts\BtScreenConstants"


#ifndef DEF_INHERITS_BT_SCREEN
Properties[DEF_BASE_PROPERTY_NUM]
#endif

#ifdef DEF_CONTROL
_ctrl[DEF_CONTROL@~]
#else
_ctrl[1]
#endif
#ifdef DEF_COMPONENTS
_components[DEF_COMPONENTS@~]
#else
_components[1]
#endif


    Method New(parentName)
    Begin
#beginexpand DEF_CONTROL
        _ctrl[@^] = "DEF_CONTROL"
#endexpand DEF_CONTROL
#beginexpand DEF_COMPONENTS
        _components[@^] = "DEF_COMPONENTS"
#endexpand DEF_COMPONENTS

        Properties[DEF_NAME_PROPERTY] = "DEF_PACKAGE_NAME"
        BtScreenCommon:New(Properties, parentName)
    End Method

    Method InitializeChildren()
    Begin
        UpdateChildren()
    End Method

    Method UpdateChildren()
    Begin
        BtFormCommon:UpdateChildren(_ctrl, _components)
    End Method

    Method UpdateLogData()
        i
    Begin
#beginexpand DEF_LOG_DISPLAY_SCREEN
        If BtScreenCommon:GetVisible(Properties) Then
            DEF_LOG_DISPLAY_SCREEN:SetCurrentLogData()
        End If
#endexpand DEF_LOG_DISPLAY_SCREEN
        If Not _ctrl[0] is nil Then
            For i = 0 To _ctrl.size - 1
                If ITableView:IsImplemented(_ctrl[i]) Then
                    ITableView:UpdateLogData(_ctrl[i])
                End If
            Next
        End If
#beginexpand DEF_LOG_COUNT_LABEL
        DEF_LOG_COUNT_LABEL:UpdateLogCount()
#endexpand DEF_LOG_COUNT_LABEL
        If Not _components[0] is nil Then
            For i = 0 To _components.size - 1
                If IBtMasterCheckControl:IsImplemented(_components[i]) Then
                    IBtMasterCheckControl:UpdateLogData(_components[i])
                End If
            Next
        End If
    End Method

    Method UpdateMasterData()
    Begin
        BtScreenCommon:UpdateMasterData(_ctrl, _components)
    End Method

    Method ReflectMasterCheckSentNum(logDataMaxRowId)
    Begin
        BtScreenCommon:ReflectMasterCheckSentNum(_components, logDataMaxRowId)
    End Method

    Method ReflectMasterCheckSentNumByRealTime()
    Begin
        BtScreenCommon:ReflectMasterCheckSentNumByRealTime(_components)
    End Method

    Method ClearSharedParameter(clearTiming)
    Begin
        BtScreenCommon:ClearSharedParameter(_ctrl, _components, clearTiming)
    End Method

    Method RegisterSharedParameter()
    Begin
        BtScreenCommon:RegisterSharedParameter(_ctrl, _components)
    End Method

    Method UpdateSharedParameterInputTool()
    Begin
        BtFormCommon:UpdateSharedParameterInputTool(_ctrl, _components)
    End Method

    Method UpdateSharedParameter()
    Begin
        BtFormCommon:UpdateSharedParameter(_ctrl)
    End Method

    Method CloseDatabase()
        i
    Begin
#beginexpand DEF_PICKING_MASTER_DATA_OWNER_SCREEN
        DEF_PICKING_MASTER_DATA_OWNER_SCREEN@1:CloseMasterCheckData(DEF_PICKING_MASTER_DATA_OWNER_SCREEN@0:Properties)
#endexpand DEF_PICKING_MASTER_DATA_OWNER_SCREEN

        If Not _ctrl[0] is nil Then
            For i = 0 To _ctrl.size - 1
                If IMasterDataOwnerControl:IsImplemented(_ctrl[i]) Then
                    IMasterDataOwnerControl:CloseMasterData(_ctrl[i])
                End If
                If IMasterCheckDataOwnerControl:IsImplemented(_ctrl[i]) Then
                    IMasterCheckDataOwnerControl:CloseMasterCheckData(_ctrl[i])
                End If
            Next
        End If
        If Not _components[0] is nil Then
            For i = 0 To _components.size - 1
                If IMasterDataOwnerControl:IsImplemented(_components[i]) Then
                    IMasterDataOwnerControl:CloseMasterData(_components[i])
                End If
                If IMasterCheckDataOwnerControl:IsImplemented(_components[i]) Then
                    IMasterCheckDataOwnerControl:CloseMasterCheckData(_components[i])
                End If
            Next
        End If
    End Method

    Method MoveFocus(transitionSource, transitionDestination)
        listId_Controls = INVALID_LIST_TABLE_ID
        listId_Components = INVALID_LIST_TABLE_ID
        i
    Begin
        listId_Controls = ListTable:CreateList()
        If Not _ctrl[0] is nil Then
            For i = 0 To _ctrl.size - 1
                ListTable:Add(listId_Controls, _ctrl[i], "")
            Next
        End If
        listId_Components = ListTable:CreateList()
        If Not _components[0] is nil Then
            For i = 0 To _components.size - 1
                ListTable:Add(listId_Components, _components[i], "")
            Next
        End If

#ifdef DEF_FOCUS_TRANSITION_UTILITY
        If IControl:IsImplemented(transitionSource) Then
            DEF_FOCUS_TRANSITION_UTILITY:ResetTargetControls(transitionSource, transitionDestination, listId_Controls, listId_Components)
        ElseIf IBtInputComponent:IsImplemented(transitionSource) Then
            DEF_FOCUS_TRANSITION_UTILITY:ResetTargetInputComponents(transitionSource, transitionDestination, listId_Controls, listId_Components)
        End If
#endif

        ListTable:DeleteList(listId_Controls)
        ListTable:DeleteList(listId_Components)
        IControl:Focus(transitionDestination)

    End Method

    Method KeyAssignedAction(sender)
        name
    Begin
        name = Properties[DEF_NAME_PROPERTY]
        If Not Window<name>:visible Or Not Window<name>:enable Then
            Return()
        End If

        Select Case sender
            Case KEYS_F1
#ifdef DEF_EVENT_F1_KEY_ACTION
                DEF_EVENT_F1_KEY_ACTION(sender)
#else
                F1KeyAction(sender)
#endif
            Case KEYS_F2
#ifdef DEF_EVENT_F2_KEY_ACTION
                DEF_EVENT_F2_KEY_ACTION(sender)
#else
                F2KeyAction(sender)
#endif
            Case KEYS_F3
#ifdef DEF_EVENT_F3_KEY_ACTION
                DEF_EVENT_F3_KEY_ACTION(sender)
#else
                F3KeyAction(sender)
#endif
            Case KEYS_F4
#ifdef DEF_EVENT_F4_KEY_ACTION
                DEF_EVENT_F4_KEY_ACTION(sender)
#else
                F4KeyAction(sender)
#endif
            Case KEYS_L
#ifdef DEF_EVENT_L_KEY_ACTION
                DEF_EVENT_L_KEY_ACTION(sender)
#else
                LKeyAction(sender)
#endif
            Case KEYS_R
#ifdef DEF_EVENT_R_KEY_ACTION
                DEF_EVENT_R_KEY_ACTION(sender)
#else
                RKeyAction(sender)
#endif
        End Select
    End Method

    Method F1KeyAction(eventArgs) 
    Begin
    End Method

#ifndef DEF_BT_HISTORY_DATA_VIEW_SKIP
    Method F2KeyAction(eventArgs) 
    Begin
    End Method

    Method F3KeyAction(eventArgs) 
    Begin
    End Method

    Method F4KeyAction(eventArgs) 
    Begin
    End Method

    Method LKeyAction(eventArgs) 
    Begin
    End Method

#endif

    Method RKeyAction(eventArgs) 
    Begin
    End Method

    Method ResetInvalidInput()
#ifdef DEF_INPUT_CONTROL
        focusedControl
#endif
    Begin
#ifdef DEF_INPUT_CONTROL
        focusedControl = Window<BtScreenCommon:GetName(Properties)>:GetFocus()
        Select Case focusedControl
#beginexpand DEF_INPUT_CONTROL
            Case "DEF_INPUT_CONTROL"
                DEF_INPUT_CONTROL:ResetInvalidInput()
#endexpand DEF_INPUT_CONTROL
        End Select
#endif
    End Method

#Region "EventHandler"
    Method OnShown()
    Begin
#ifdef DEF_ON_SHOWN
        DEF_ON_SHOWN()
#endif
    End Method

    Method OnFormShown()
    Begin
#ifdef DEF_ON_FORM_SHOWN
        DEF_ON_FORM_SHOWN()
#endif
    End Method

    Method OnHiding()
    Begin
#ifdef DEF_ON_HIDING
        DEF_ON_HIDING()
#endif
    End Method
#End Region

    Method Dispose()
    Begin
        BtFormCommon:Dispose(_ctrl)
    End Method

    Method Show(value)
    Begin
        BtFormCommon:ShowDisplay(Properties, _ctrl, value)
    End Method

    Method Focus()
    Begin
        BtScreenCommon:Focus(Properties)
    End Method

    Method InitializeTimer()
    Begin
#beginexpand DEF_EVENT_TIMER
        UserObj<"__SMALL_OBJ__" & StringUtility:GetHandleTagNameEraseSymbol(DEF_EVENT_TIMER)>:Open()
        UserObj<StringUtility:GetHandleTagNameEraseSymbol(DEF_EVENT_TIMER)>:Set(0, DEF_EVENT_TIMER)
        UserObj<StringUtility:GetHandleTagNameEraseSymbol(DEF_EVENT_TIMER)>:Set(1, false)
#endexpand DEF_EVENT_TIMER
    End Method
    Method TerminateTimer()
    Begin
#beginexpand DEF_EVENT_TIMER
        UserObj<StringUtility:GetHandleTagNameEraseSymbol(DEF_EVENT_TIMER)>:Close()
#endexpand DEF_EVENT_TIMER
    End Method
    Method OnTimeUp(sender)
    Begin
#beginexpand DEF_EVENT_TIMER
        If UserObj<StringUtility:GetHandleTagNameEraseSymbol(DEF_EVENT_TIMER)>:Get(1) Then
            UserObj<StringUtility:GetHandleTagNameEraseSymbol(DEF_EVENT_TIMER)>:Exec(0)
        End If
#endexpand DEF_EVENT_TIMER
    End Method


#popdefine
