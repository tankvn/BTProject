
Package SystemSettingFileUtility

#Region "Constans"

    #define SECTIONNAME_BUZZER_SUCCESS "buzzer_success"

    #define SECTIONNAME_BUZZER_ERROR "buzzer_error"

    #define SECTIONNAME_VIBRATOR_SUCCESS "vibrator_success"

    #define SECTIONNAME_VIBRATOR_ERROR "vibrator_error"

    #define SECTIONNAME_LED_SUCCESS "led_success"

    #define SECTIONNAME_LED_ERROR "led_error"

    #define SECTIONNAME_KEY_SETTING "key_setting"

    #define KEYNAME_BUZZER_ONTIME "ontime"

    #define KEYNAME_BUZZER_OFFTIME "offtime"

    #define KEYNAME_BUZZER_REPEAT_COUNT "repeatcount"

    #define KEYNAME_BUZZER_TONE "tone"

    #define KEYNAME_BUZZER_VOLUME "volume"

    #define KEYNAME_BUZZER_ENABLE "enable"

    #define KEYNAME_VIBRATOR_ONTIME "ontime"

    #define KEYNAME_VIBRATOR_OFFTIME "offtime"

    #define KEYNAME_VIBRATOR_REPEAT_COUNT "repeatcount"

    #define KEYNAME_VIBRATOR_ENABLE "enable"

    #define KEYNAME_LED_ONTIME "ontime"

    #define KEYNAME_LED_OFFTIME "offtime"

    #define KEYNAME_LED_REPEAT_COUNT "repeatcount"

    #define KEYNAME_LED_COLOR "color"

    #define KEYNAME_LED_ENABLE "enable"

    #define KEYNAME_KEY_CLICK_VOLUME "keyclickvolume"

    #define BVL_ENABLE_VALUE "1"

    #define DEF_SYSTEM_SETTING_FILE_NAME "1:EnvironmentSettings.ini"

    #define DEF_EXTENTION_TEMP ".tmp"

    #define DEF_STR_SECTION_START "["

    #define DEF_STR_SECTION_END "]"

    #define DEF_STR_SEPARATOR_KEY_INFO "="

    #define DEF_NEW_LINE "\n"

    #define DEF_LINE_FEED "\r"

    #define DEF_UNIT_ONOFF_TIME 100

#End Region

#Region "Method"

    Method WriteSetting(section, key, newValue) 
        result
        srcFileName
        destFileName
        currentLine
        sectionName = DEF_STR_SECTION_START & section & DEF_STR_SECTION_END
        sectionFound = false
        keyInfo[2]
        isUpdated = false
    Begin
        srcFileName = DEF_SYSTEM_SETTING_FILE_NAME
        destFileName = srcFileName & "." & Handy:date.Remove("/") & Handy:time.Remove(":") & DEF_EXTENTION_TEMP

        result = FileStream<srcFileName>:Open("r")
        If (FileStream<destFileName>:Open("w") is false) Then
            FileStream<srcFileName>:Close()
            Return (false)
        End If

        If (result is true) Then
            While true
                currentLine = ReadValue(srcFileName)
                If (currentLine eq "") Then
                    Wbreak
                End If

                If (IsSection(currentLine) is true) Then
                    If (sectionFound is true) And (isUpdated is false) Then
                        WriteNewSettings(destFileName, "", key, newValue)
                        isUpdated = true
                    End If
                    If (currentLine eq sectionName) Then
                        sectionFound = true
                    End If
                Else
                    keyInfo = currentLine.split(DEF_STR_SEPARATOR_KEY_INFO)
                    If (sectionFound is true) And (isUpdated is false) Then
                        If (keyInfo[0] eq key) Then
                            WriteNewSettings(destFileName, "", key, newValue)
                            isUpdated = true
                            Wcontinue
                        End If
                    End If
                End If
                WriteValue(destFileName, currentLine)
            Wend
            FileStream<srcFileName>:Close()
        End If

        If (isUpdated is false) Then
            If (sectionFound is true) Then
                WriteNewSettings(destFileName, "", key, newValue)
            Else
                WriteNewSettings(destFileName, sectionName, key, newValue)
            End If
        End If
        FileStream<destFileName>:Close()

        FileSystem:Initialize()
        result = FileSystem:Copy(destFileName, srcFileName, true)
        If (result is true) Then
            FileSystem:Delete(destFileName)
        End If

        Return (true)
    End Method

    Method ReadSetting(section, key) As String
        result
        srcFileName
        sectionName = DEF_STR_SECTION_START & section & DEF_STR_SECTION_END
        currentLine
        sectionFound = false
        keyInfo[2]
    Begin
        srcFileName = DEF_SYSTEM_SETTING_FILE_NAME

        result = FileStream<srcFileName>:Open("r")
        If (result is false) Then
            Return ("")
        End If

        While true
            currentLine = ReadValue(srcFileName)
            If (currentLine eq "") Then
                Wbreak
            End If

            If (IsSection(currentLine) is true) Then
                If (sectionFound is true) Then
                    FileStream<srcFileName>:Close()
                    Return ("")
                End If
                If (currentLine eq sectionName) Then
                    sectionFound = true
                End If
            Else
                keyInfo = currentLine.split(DEF_STR_SEPARATOR_KEY_INFO)
                If (sectionFound is true) Then
                    If (keyInfo[0] eq key) Then
                        FileStream<srcFileName>:Close()
                        Return (keyInfo[1])
                    End If
                End If
            End If
        Wend
        FileStream<srcFileName>:Close()

        Return ("")
    End Method

    Method WriteNewSettings(destFileName, sectionName, keyName, newValue)
        keyInfo
    Begin
        If (sectionName ne "") Then
            WriteValue(destFileName, sectionName)
        End If
        keyInfo = keyName & DEF_STR_SEPARATOR_KEY_INFO & newValue
        WriteValue(destFileName, keyInfo)
    End Method

    Method WriteValue(destFileName, newValue)
        newLine
    Begin
        newLine = newValue & DEF_NEW_LINE
        FileStream<destFileName>:Puts(newLine)
    End Method

    Method ReadValue(srcFileName)
        readValue
    Begin
        readValue = FileStream<srcFileName>:Gets(8192)
        readValue = readValue.Remove(DEF_NEW_LINE)
        readValue = readValue.Remove(DEF_LINE_FEED)
        Return (readValue)
    End Method

    Method IsSection(targetString) 
    Begin
        Return ((targetString.Left(1) eq DEF_STR_SECTION_START) And (targetString.Right(1) eq DEF_STR_SECTION_END))
    End Method

    Method UpdateKeyOperationSoundData(soundLevel)
    Begin
        Key:SetVolume(soundLevel)
        Return (true)
    Catch
        Return (false)
    End Method

    Method UpdateTouchOperationSoundData(soundLevel)
        isTouchPanel = TERMINAL_SETTING_IS_TOUCH_PANEL
    Begin
        If (isTouchPanel is true) Then
            If (soundLevel==OPERATION_SOUND_OFF) Then
                LCD:volume = false
            Else
                LCD:volume = true
            End If
        End If
        Return (true)
    Catch
        Return (false)
    End Method

    Method LoadKeyOperationSoundData()
        soundLevel
    Begin
        soundLevel = GetKeyOperationSoundData()
        If soundLevel eq "" Then
            Return (false)
        End If
        If (UpdateKeyOperationSoundData(soundLevel) is false) Then
            Return (false)
        End If
        If (UpdateTouchOperationSoundData(soundLevel) is false) Then
            Return (false)
        End If

        Return (true)
    End Method

    Method GetBuzzerOnTime(isError)
        ontime
        section
    Begin
        If isError is true Then
            section = SECTIONNAME_BUZZER_ERROR
        Else
            section = SECTIONNAME_BUZZER_SUCCESS
        End If
        ontime = SystemSettingFileUtility:ReadSetting(section, KEYNAME_BUZZER_ONTIME)
        If ontime eq "" Then
            Return (Buzzer:onTime)
        End If
        ontime = ontime / DEF_UNIT_ONOFF_TIME
        Return (ontime)
    End Method

    Method GetBuzzerOffTime(isError)
        offtime
        section
    Begin
        If isError is true Then
            section = SECTIONNAME_BUZZER_ERROR
        Else
            section = SECTIONNAME_BUZZER_SUCCESS
        End If
        offtime = SystemSettingFileUtility:ReadSetting(section, KEYNAME_BUZZER_OFFTIME)
        If offtime eq "" Then
            Return (Buzzer:offTime)
        End If
        offtime = offtime / DEF_UNIT_ONOFF_TIME
        Return (offtime)
    End Method

    Method GetBuzzerLoopCount(isError)
        repeatcount
        section
    Begin
        If isError is true Then
            section = SECTIONNAME_BUZZER_ERROR
        Else
            section = SECTIONNAME_BUZZER_SUCCESS
        End If
        repeatcount = SystemSettingFileUtility:ReadSetting(section, KEYNAME_BUZZER_REPEAT_COUNT)
        If repeatcount eq "" Then
            Return (Buzzer:loopCount)
        End If
        Return (repeatcount)
    End Method

    Method GetBuzzerPitch(isError)
        tone
        section
    Begin
        If isError is true Then
            section = SECTIONNAME_BUZZER_ERROR
        Else
            section = SECTIONNAME_BUZZER_SUCCESS
        End If
        tone = SystemSettingFileUtility:ReadSetting(section, KEYNAME_BUZZER_TONE)
        If tone eq "" Then
            Return (Buzzer:pitch)
        End If
        Return (tone)
    End Method

    Method GetBuzzerVolume(isError)
        volume
        section
    Begin
        If isError is true Then
            section = SECTIONNAME_BUZZER_ERROR
        Else
            section = SECTIONNAME_BUZZER_SUCCESS
        End If
        volume = SystemSettingFileUtility:ReadSetting(section, KEYNAME_BUZZER_VOLUME)
        If volume eq "" Then
            If (Buzzer:volume is nil) Then
                Return ("0")
            End If
            Return (Buzzer:volume)
        End If
        Return (volume)
    End Method

    Method GetBuzzerEnable(isError)
        buzzerEnable
        section
    Begin
        If isError is true Then
            section = SECTIONNAME_BUZZER_ERROR
        Else
            section = SECTIONNAME_BUZZER_SUCCESS
        End If
        buzzerEnable = SystemSettingFileUtility:ReadSetting(section, KEYNAME_BUZZER_ENABLE)
        If buzzerEnable eq BVL_ENABLE_VALUE Then
            Return (true)
        End If
        Return (false)
    End Method

    Method GetVibratorOnTime(isError)
        ontime
        section
    Begin
        If isError is true Then
            section = SECTIONNAME_VIBRATOR_ERROR
        Else
            section = SECTIONNAME_VIBRATOR_SUCCESS
        End If
        ontime = SystemSettingFileUtility:ReadSetting(section, KEYNAME_VIBRATOR_ONTIME)
        If ontime eq "" Then
            Return (Vibration:onTime)
        End If
        ontime = ontime / DEF_UNIT_ONOFF_TIME
        Return (ontime)
    End Method

    Method GetVibratorOffTime(isError)
        offtime
        section
    Begin
        If isError is true Then
            section = SECTIONNAME_VIBRATOR_ERROR
        Else
            section = SECTIONNAME_VIBRATOR_SUCCESS
        End If
        offtime = SystemSettingFileUtility:ReadSetting(section, KEYNAME_VIBRATOR_OFFTIME)
        If offtime eq "" Then
            Return (Vibration:offTime)
        End If
        offtime = offtime / DEF_UNIT_ONOFF_TIME
        Return (offtime)
    End Method

    Method GetVibratorLoopCount(isError)
        repeatcount
        section
    Begin
        If isError is true Then
            section = SECTIONNAME_VIBRATOR_ERROR
        Else
            section = SECTIONNAME_VIBRATOR_SUCCESS
        End If
        repeatcount = SystemSettingFileUtility:ReadSetting(section, KEYNAME_VIBRATOR_REPEAT_COUNT)
        If repeatcount eq "" Then
            Return (Vibration:loopCount)
        End If
        Return (repeatcount)
    End Method

    Method GetVibratorEnable(isError)
        vibratorEnable
        section
    Begin
        If isError is true Then
            section = SECTIONNAME_VIBRATOR_ERROR
        Else
            section = SECTIONNAME_VIBRATOR_SUCCESS
        End If
        vibratorEnable = SystemSettingFileUtility:ReadSetting(section, KEYNAME_VIBRATOR_ENABLE)
        If vibratorEnable eq BVL_ENABLE_VALUE Then
            Return (true)
        End If
        Return (false)
    End Method

    Method GetLedOnTime(isError)
        ontime
        section
    Begin
        If isError is true Then
            section = SECTIONNAME_LED_ERROR
        Else
            section = SECTIONNAME_LED_SUCCESS
        End If
        ontime = SystemSettingFileUtility:ReadSetting(section, KEYNAME_LED_ONTIME)
        If ontime eq "" Then
            Return (Led:onTime)
        End If
        ontime = ontime / DEF_UNIT_ONOFF_TIME
        Return (ontime)
    End Method

    Method GetLedOffTime(isError)
        offtime
        section
    Begin
        If isError is true Then
            section = SECTIONNAME_LED_ERROR
        Else
            section = SECTIONNAME_LED_SUCCESS
        End If
        offtime = SystemSettingFileUtility:ReadSetting(section, KEYNAME_LED_OFFTIME)
        If offtime eq "" Then
            Return (Led:offTime)
        End If
        offtime = offtime / DEF_UNIT_ONOFF_TIME
        Return (offtime)
    End Method

    Method GetLedLoopCount(isError)
        repeatcount
        section
    Begin
        If isError is true Then
            section = SECTIONNAME_LED_ERROR
        Else
            section = SECTIONNAME_LED_SUCCESS
        End If
        repeatcount = SystemSettingFileUtility:ReadSetting(section, KEYNAME_LED_REPEAT_COUNT)
        If repeatcount eq "" Then
            Return (Led:loopCount)
        End If
        Return (repeatcount)
    End Method

    Method GetLedColor(isError)
        color
        section
    Begin
        If isError is true Then
            section = SECTIONNAME_LED_ERROR
        Else
            section = SECTIONNAME_LED_SUCCESS
        End If
        color = SystemSettingFileUtility:ReadSetting(section, KEYNAME_LED_COLOR)
        If color eq "" Then
            If (Led:onTime eq "red") Then color = INDICATOR_COLOR_RED
            ElseIf (Led:onTime eq "green") Then color = INDICATOR_COLOR_GREEN
            ElseIf (Led:onTime eq "orange") Then color = INDICATOR_COLOR_RED + INDICATOR_COLOR_GREEN
            Else color = INDICATOR_COLOR_OFF End If
            Return (color)
        End If
        Return (color)
    End Method

    Method GetLedEnable(isError)
        ledEnable
        section
    Begin
        If isError is true Then
            section = SECTIONNAME_LED_ERROR
        Else
            section = SECTIONNAME_LED_SUCCESS
        End If
        ledEnable = SystemSettingFileUtility:ReadSetting(section, KEYNAME_LED_ENABLE)
        If ledEnable eq BVL_ENABLE_VALUE Then
            Return (true)
        End If
        Return (false)
    End Method

    Method LoadSystemSettingFile() 
    Begin
        If (LoadKeyOperationSoundData() is false) Then
            Return (false)
        End If

        Return (true)
    End Method

    Method GetBuzzerData(pattern)
    Begin
        Return (ReadSetting(pattern, KEYNAME_BUZZER_VOLUME))
    End Method

    Method WriteScanSoundLevel(soundLevel, section)
    Begin
        If (WriteSetting(section, KEYNAME_BUZZER_VOLUME, soundLevel) is false) Then
            Return (false)
        End If

        Return (true)
    End Method

    Method GetBuzzerLevelWhenScanningSucceed()
    Begin
        Return (GetBuzzerData(SECTIONNAME_BUZZER_SUCCESS))
    End Method

    Method SetScanningSuccessSoundLevel(soundLevel)
    Begin
        If (WriteScanSoundLevel(soundLevel, SECTIONNAME_BUZZER_SUCCESS) is false) Then
            ErrorManager:SetError(MESSAGE_ERROR_SET_BUZZER_SETTINGS)
            Return (nil)
        End If
    End Method

    Method GetBuzzerLevelWhenScanningError()
    Begin
        Return (GetBuzzerData(SECTIONNAME_BUZZER_ERROR))
    End Method

    Method SetScanningErrorSoundLevel(soundLevel)
    Begin
        If (WriteScanSoundLevel(soundLevel, SECTIONNAME_BUZZER_ERROR) is false) Then
            ErrorManager:SetError(MESSAGE_ERROR_SET_BUZZER_SETTINGS)
            Return (nil)
        End If
    End Method

    Method GetKeyOperationSoundData()
    Begin
        Return (ReadSetting(SECTIONNAME_KEY_SETTING, KEYNAME_KEY_CLICK_VOLUME))
    End Method

    Method SetKeyOperationSoundData(soundLevel)
    Begin
        If (WriteSetting(SECTIONNAME_KEY_SETTING, KEYNAME_KEY_CLICK_VOLUME, soundLevel) is false) Then
            ErrorManager:SetError(MESSAGE_ERROR_SET_KEY_TOUCHPANEL_SOUND_SETTINGS)
            Return (nil)
        End If

        If (LoadSystemSettingFile() is false) Then
            ErrorManager:SetError(MESSAGE_ERROR_SET_KEY_TOUCHPANEL_SOUND_SETTINGS)
            Return (nil)
        End If
    Catch
        ErrorManager:SetError(MESSAGE_ERROR_SET_KEY_TOUCHPANEL_SOUND_SETTINGS)
    End Method

#End Region

End Package
