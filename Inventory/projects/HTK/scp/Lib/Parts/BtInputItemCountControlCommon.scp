
Package BtInputItemCountControlCommon

    Method GetName(properties[])
    Begin
        Return (properties[0])
    End Method
    Method SetName(properties[], value)
    Begin
        properties[0] = value
    End Method

    Method GetFirstInputQuantityUnit(properties[])
    Begin
        Return (properties[1])
    End Method
    Method SetFirstInputQuantityUnit(properties[], value)
    Begin
        properties[1] = value
    End Method

    Method GetSecondInputQuantityUnit(properties[])
    Begin
        Return (properties[2])
    End Method
    Method SetSecondInputQuantityUnit(properties[], value)
    Begin
        properties[2] = value
    End Method

    Method GetThirdInputQuantityUnit(properties[])
    Begin
        Return (properties[3])
    End Method
    Method SetThirdInputQuantityUnit(properties[], value)
    Begin
        properties[3] = value
    End Method

    Method GetInputItemToolName(properties[])
    Begin
        Return (properties[17])
    End Method
    Method SetInputItemToolName(properties[], value)
    Begin
        properties[17] = value
    End Method

    Method GetFirstInputQuantityToolName(properties[])
    Begin
        Return (properties[18])
    End Method
    Method SetFirstInputQuantityToolName(properties[], value)
    Begin
        properties[18] = value
    End Method

    Method GetSecondInputQuantityToolName(properties[])
    Begin
        Return (properties[19])
    End Method
    Method SetSecondInputQuantityToolName(properties[], value)
    Begin
        properties[19] = value
    End Method

    Method GetThirdInputQuantityToolName(properties[])
    Begin
        Return (properties[20])
    End Method
    Method SetThirdInputQuantityToolName(properties[], value)
    Begin
        properties[20] = value
    End Method

    Method GetSumOfQuantityValueLabelName(properties[])
    Begin
        Return (properties[21])
    End Method
    Method SetSumOfQuantityValueLabelName(properties[], value)
    Begin
        properties[21] = value
    End Method

    Method GetIsExistInputItemTool(properties[])
    Begin
        Return (properties[12])
    End Method
    Method SetIsExistInputItemTool(properties[], value)
    Begin
        properties[12] = value
    End Method

    Method GetIsExistFirstInputQuantityTool(properties[])
    Begin
        Return (properties[13])
    End Method
    Method SetIsExistFirstInputQuantityTool(properties[], value)
    Begin
        properties[13] = value
    End Method

    Method GetIsExistSecondInputQuantityTool(properties[])
    Begin
        Return (properties[14])
    End Method
    Method SetIsExistSecondInputQuantityTool(properties[], value)
    Begin
        properties[14] = value
    End Method

    Method GetIsExistThirdInputQuantityTool(properties[])
    Begin
        Return (properties[15])
    End Method
    Method SetIsExistThirdInputQuantityTool(properties[], value)
    Begin
        properties[15] = value
    End Method

    Method GetIsExistSumOfQuantityValueLabel(properties[])
    Begin
        Return (properties[16])
    End Method
    Method SetIsExistSumOfQuantityValueLabel(properties[], value)
    Begin
        properties[16] = value
    End Method

    Method GetQuantityEntryType(properties[])
    Begin
        Return (properties[5])
    End Method
    Method SetQuantityEntryType(properties[], value)
    Begin
        properties[5] = value
    End Method

    Method GetFixedItemData(properties[])
    Begin
        Return (properties[11])
    End Method
    Method SetFixedItemData(properties[], value)
    Begin
        properties[11] = value
    End Method

    Method GetInputQuantityCount(properties[])
    Begin
        Return (properties[10])
    End Method
    Method SetInputQuantityCount(properties[], value)
    Begin
        properties[10] = value
    End Method

    Method GetItemCount(properties[])
    Begin
        Return (properties[22])
    End Method
    Method SetItemCount(properties[], value)
    Begin
        properties[22] = value
    End Method

    _scannedEventAttatched = false

    Method GetLogEditType(properties[], index)
    Begin
        Select Case index
            Case 0
                Return (GetChildLogEditType(GetIsExistFirstInputQuantityTool(properties),
                                            GetFirstInputQuantityToolName(properties)))
            Case 1
                Return (GetChildLogEditType(GetIsExistSecondInputQuantityTool(properties),
                                            GetSecondInputQuantityToolName(properties)))
            Case 2
                Return (GetChildLogEditType(GetIsExistThirdInputQuantityTool(properties),
                                            GetThirdInputQuantityToolName(properties)))
            Case Else
                Return (2)
        End Select
    End Method

    Method GetDecimalPlacesIndex(properties[], index)
    Begin
         Select Case index
            Case 0
                Return (GetChildDecimalPlacesIndex(GetIsExistFirstInputQuantityTool(properties),
                                                   GetFirstInputQuantityToolName(properties)))
            Case 1
                Return (GetChildDecimalPlacesIndex(GetIsExistSecondInputQuantityTool(properties),
                                                   GetSecondInputQuantityToolName(properties)))
            Case 2
                Return (GetChildDecimalPlacesIndex(GetIsExistThirdInputQuantityTool(properties),
                                                   GetThirdInputQuantityToolName(properties)))
            Case Else
                Return (0)
        End Select
    End Method

    Method GetCheckDuplicateReading(properties[], index)
    Begin
        Return (false)
    End Method

    Method GetIsSameLogItem(properties[], index, targetLogItemControl)
    Begin
        Select Case index
            Case 0
                Return (GetChildIsSameLogItem(GetIsExistFirstInputQuantityTool(properties),
                                              GetFirstInputQuantityToolName(properties),
                                              targetLogItemControl))
            Case 1
                Return (GetChildIsSameLogItem(GetIsExistSecondInputQuantityTool(properties),
                                              GetSecondInputQuantityToolName(properties),
                                              targetLogItemControl))
            Case 2
                Return (GetChildIsSameLogItem(GetIsExistThirdInputQuantityTool(properties),
                                              GetThirdInputQuantityToolName(properties),
                                              targetLogItemControl))
            Case Else
                Return (false)
        End Select
    End Method

    Method GetLogTableFieldType(properties[], index)
    Begin
        Select Case index
            Case 0
                Return (GetChildLogTableFieldType(GetIsExistFirstInputQuantityTool(properties),
                                                  GetFirstInputQuantityToolName(properties)))
            Case 1
                Return (GetChildLogTableFieldType(GetIsExistSecondInputQuantityTool(properties),
                                                  GetSecondInputQuantityToolName(properties)))
            Case 2
                Return (GetChildLogTableFieldType(GetIsExistThirdInputQuantityTool(properties),
                                                  GetThirdInputQuantityToolName(properties)))
            Case Else
                Return (1)
        End Select
    End Method

    Method GetLogData(properties[], index)
    Begin
        Select Case index
            Case 0
                Return (GetChildLogData(GetIsExistFirstInputQuantityTool(properties),
                                        GetFirstInputQuantityToolName(properties),
                                        properties[1]))
            Case 1
                Return (GetChildLogData(GetIsExistSecondInputQuantityTool(properties),
                                        GetSecondInputQuantityToolName(properties),
                                        properties[2]))
            Case 2
                Return (GetChildLogData(GetIsExistThirdInputQuantityTool(properties),
                                        GetThirdInputQuantityToolName(properties),
                                        properties[3]))
            Case Else
                Return ("")
        End Select
    End Method

    Method CheckValidInput(properties[], checkTarget, index)
    Begin
        Select Case index
            Case 0
                Return (CheckChildValidInput(GetIsExistFirstInputQuantityTool(properties),
                                             GetFirstInputQuantityToolName(properties),
                                             checkTarget))
            Case 1
                Return (CheckChildValidInput(GetIsExistSecondInputQuantityTool(properties),
                                             GetSecondInputQuantityToolName(properties),
                                             checkTarget))
            Case 2
                Return (CheckChildValidInput(GetIsExistThirdInputQuantityTool(properties),
                                             GetThirdInputQuantityToolName(properties),
                                             checkTarget))
            Case Else
                Return (true)
        End Select
    End Method

    Method GetChildLogEditType(isExist, childName)
    Begin
        If (isExist) Then
            Return (ILogItemControl:GetLogEditType(childName, 0))
        End If
        Return (2)
    End Method

    Method GetChildDecimalPlacesIndex(isExist, childName)
    Begin
        If (isExist) Then
            Return (ILogItemControl:GetDecimalPlaces(childName, 0))
        End If
        Return (0)
    End Method

    Method GetChildIsSameLogItem(isExist, childName, targetLogItemControl)
    Begin
        If (isExist) Then
            Return (ILogItemControl:GetIsSameLogItem(childName, 0, targetLogItemControl))
        End If
        Return (false)
    End Method

    Method GetChildLogTableFieldType(isExist, childName)
    Begin
        If (isExist) Then
            Return (ILogItemControl:GetLogTableFieldType(childName, 0))
        End If
        Return (1)
    End Method

    Method GetChildLogData(isExist, childName, unit)
        targetValue
        result
    Begin
        If (Not isExist) Then
            Return ("")
        End If
        targetValue = MathUtility:ParseToDecimal(ILogItemControl:GetLogData(childName, 0))
        result = MathUtility:CalculateByOperator(targetValue, 3, unit)
        ErrorManager:GetError()
        Return (result)
    End Method

    Method CheckChildValidInput(isExist, childName, checkTarget)
    Begin
        If (isExist) Then
            Return (ILogItemControl:CheckValidInput(childName, checkTarget, 0))
        End If
        Return (true)
    End Method

    Method GetOutputLogEventHandler(properties[])
    Begin
        Return (properties[23])
    End Method
    Method SetOutputLogEventHandler(properties[], handle)
    Begin
        properties[23] = handle
    End Method

    Method ILogItemControlInvokeCommon(this, properties[])
    Begin
        Select Case UserObj<this>:Get(1)
            Case "GetLogEditType"
                InterfaceCommon:Result = GetLogEditType(properties, UserObj<this>:Get(2))
            Case "GetDecimalPlaces"
                InterfaceCommon:Result = GetDecimalPlacesIndex(properties, UserObj<this>:Get(2))
            Case "GetCheckDuplicateReading"
                InterfaceCommon:Result = GetCheckDuplicateReading(properties, UserObj<this>:Get(2))
            Case "GetIsSameLogItem"
                InterfaceCommon:Result = GetIsSameLogItem(properties, UserObj<this>:Get(2), UserObj<this>:Get(3))
            Case "GetControlName"
                InterfaceCommon:Result = GetControlName(properties, UserObj<this>:Get(2))
            Case "GetLogTableFieldType"
                InterfaceCommon:Result = GetLogTableFieldType(properties, UserObj<this>:Get(2))
            Case "GetLogData"
                InterfaceCommon:Result = GetLogData(properties, UserObj<this>:Get(2))
            Case "CheckValidInput"
                InterfaceCommon:Result = CheckValidInput(properties, UserObj<this>:Get(2), UserObj<this>:Get(3))
        End Select
    End Method

    Method New(properties[])
    Begin
        SetFirstInputQuantityUnit(properties, 1)
        SetSecondInputQuantityUnit(properties, 1)
        SetThirdInputQuantityUnit(properties, 1)
        SetFixedItemData(properties, "")
        SetItemCount(properties, "0")
    End Method

    Method CanCountUp(properties[])
    Begin
        Return ((GetQuantityEntryType(properties) == 0) And
                 (GetInputQuantityCount(properties) == 1))
    End Method

    Method CountUp(number)
    Begin
        If ((Not number.isDigit) Or (number is nil)) Then
            Return ("1")
        End If

        If (number == 2147483647) Then
            Return ("1")
        End If

        Return (number + 1)
    End Method

    Method GetControlName(properties[], index)
    Begin
        Select Case index
            Case 0
                Return ("Quantity1")
            Case 1
                Return ("Quantity2")
            Case 2
                Return ("Quantity3")
            Case Else
                Return ("InvalidQuantity")
        End Select
    End Method

    Method GetQuantityLogData(value, unit)
        targetValue
        result
    Begin
        targetValue = MathUtility:ParseToDecimal(value)
        result = MathUtility:CalculateByOperator(targetValue, 3, unit)

        ErrorManager:GetError()

        Return (result)
    End Method

    Method UpdateNumberInput(properties[], newValue)
        formattedText
    Begin
        IControl:SetText(GetFirstInputQuantityToolName(properties), newValue)
        formattedText = MathUtility:AdjustDecimalPlaces(ILogItemControl:GetDecimalPlaces(GetName(properties), 0),
                                                        newValue)
        IControl:SetText(GetFirstInputQuantityToolName(properties), formattedText)
    End Method

    Method UpdateAmountLabel(properties[])
        amount = 0
        maxDecimalPlaces
    Begin
        If (Not GetIsExistSumOfQuantityValueLabel(properties)) Then
            Return (nil)
        End If
        amount = SumQuantity(properties)
        maxDecimalPlaces = GetMaxDecimalPlaces(properties)
        IControl:SetText(GetSumOfQuantityValueLabelName(properties),
                         MathUtility:AdjustDecimalPlaces(maxDecimalPlaces, amount))
    End Method

    Method SumQuantity(properties[])
        amount = 0
    Begin
        If (GetIsExistFirstInputQuantityTool(properties)) Then
            amount = CalculateAmount(IControl:GetText(GetFirstInputQuantityToolName(properties)),
                                     GetFirstInputQuantityUnit(properties), amount)
        End If
        If (GetIsExistSecondInputQuantityTool(properties)) Then
            amount = CalculateAmount(IControl:GetText(GetSecondInputQuantityToolName(properties)),
                                     GetSecondInputQuantityUnit(properties), amount)
        End If
        If (GetIsExistThirdInputQuantityTool(properties)) Then
            amount = CalculateAmount(IControl:GetText(GetThirdInputQuantityToolName(properties)),
                                     GetThirdInputQuantityUnit(properties), amount)
        End If
        Return (amount)
    End Method

    Method CalculateAmount(value, unit, amount)
    Begin
        If (value.isDigit) Then
            amount = amount + value * unit
        End If
        Return (amount)
    End Method

    Method GetMaxDecimalPlaces(properties[])
        maxDecimalPlaces = 0
    Begin
        If (GetIsExistFirstInputQuantityTool(properties)) Then
            maxDecimalPlaces = GetLargerDecimalPlaces(maxDecimalPlaces,
                                                      ILogItemControl:GetDecimalPlaces(GetName(properties),
                                                                                       0))
        End If
        If (GetIsExistSecondInputQuantityTool(properties)) Then
            maxDecimalPlaces = GetLargerDecimalPlaces(maxDecimalPlaces,
                                                      ILogItemControl:GetDecimalPlaces(GetName(properties),
                                                      1))
        End If
        If (GetIsExistThirdInputQuantityTool(properties)) Then
            maxDecimalPlaces = GetLargerDecimalPlaces(maxDecimalPlaces,
                                                      ILogItemControl:GetDecimalPlaces(GetName(properties),
                                                      2))
        End If
        Return (maxDecimalPlaces)
    End Method

    Method GetLargerDecimalPlaces(decimalPlaces, comparisonTarget)
    Begin
        If (decimalPlaces < comparisonTarget) Then
            Return (comparisonTarget)
        End If
        Return (decimalPlaces)
    End Method

    Method ProcessOnInputSameOrElseItem(properties[], inputData)
        parameter[1]
    Begin
        Event:Clear()

        If (ErrorManager:GetError() ne "") Then
            Return (nil)
        End If

        If (GetInputQuantityCount(properties) <> 1) Then
            Return (nil)
        End If

        If (inputData eq IControl:GetText(GetInputItemToolName(properties))) And CanCountUp(properties) Then
            SetItemCount(properties, CountUp(GetItemCount(properties)))
            UpdateNumberInput(properties, GetItemCount(properties))
            IInputQuantityTool:ChangeMode(GetFirstInputQuantityToolName(properties), 1, true)
            Return (nil)
        End If

        IControl:SetText(GetFirstInputQuantityToolName(properties), GetItemCount(properties))
        If (Not IInputQuantityTool:CheckAndFixDisplayText(GetFirstInputQuantityToolName(properties))) Then
            Return (nil)
        End If
        IInputQuantityTool:PreprocessEnterData(GetFirstInputQuantityToolName(properties))
        IBtInputControl:StoreTemporaryText(GetFirstInputQuantityToolName(properties))
        parameter[0] = true
        If (EventUtility:Exec(GetOutputLogEventHandler(properties), GetName(properties), parameter) is false) Then
            Return (nil)
        End If
        IBtInputControl:ResetTemporaryText(GetFirstInputQuantityToolName(properties))
        SetItemCount(properties, "")

        IControl:SetText(GetInputItemToolName(properties), inputData)
        IBtInputControl:Reset(GetFirstInputQuantityToolName(properties))

        If (Not IInputItemTool:CheckAndFixDisplayText(GetInputItemToolName(properties))) Then
            IControl:Focus(GetInputItemToolName(properties))
            Return (nil)
        End If

        If (Not IInputItemTool:EnterData(GetInputItemToolName(properties))) Then
            IControl:Focus(GetInputItemToolName(properties))
            Return (nil)
        End If

        SetFixedItemData(properties, inputData)
        SetItemCount(properties, "1")
        UpdateNumberInput(properties, "1")
    End Method

    Method OnInputtedItemBySingleInput(properties[], sender, result)
    Begin
        If result is false Then
            Return (false)
        End If

        If CanCountUp(properties) And (GetFixedItemData(properties) eq IControl:GetText(GetInputItemToolName(properties))) Then
            SetItemCount(properties, CountUp(GetItemCount(properties)))
            UpdateNumberInput(properties, GetItemCount(properties))
        Else
            SetItemCount(properties, "1")
            UpdateNumberInput(properties, "1")
        End If
        SetFixedItemData(properties, IControl:GetText(GetInputItemToolName(properties)))
        Return (true)
    End Method

    Method OnScannedInInputQuantity(properties[], sender)
    Begin
        ProcessOnInputSameOrElseItem(properties, IInputQuantityTool:ReadScanData(sender))
    End Method

End Package

