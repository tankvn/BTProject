<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddColumnSql" xml:space="preserve">
    <value>ALTER TABLE {0} ADD COLUMN {1} {2}</value>
    <comment>{0}:テーブル名
{1}:列名
{2}:型</comment>
  </data>
  <data name="AsSql" xml:space="preserve">
    <value>{0} AS {1}</value>
    <comment>{0}:データ式
{1}:表示名</comment>
  </data>
  <data name="AverageSql" xml:space="preserve">
    <value>AVG({0})</value>
    <comment>{0}:フィールド名</comment>
  </data>
  <data name="BeginTransactionSql" xml:space="preserve">
    <value>BEGIN TRANSACTION {0}</value>
    <comment>{0}:トランザクション名</comment>
  </data>
  <data name="CaseSql" xml:space="preserve">
    <value>CASE WHEN {0} THEN {1} ELSE {2} END</value>
    <comment>{0}: 条件式
{1}:真値
{2}:偽値</comment>
  </data>
  <data name="CommitTransactionSql" xml:space="preserve">
    <value>COMMIT TRANSACTION {0}</value>
    <comment>{0}:トランザクション名</comment>
  </data>
  <data name="ConnectionString" xml:space="preserve">
    <value>Data Source="{0}"; Synchronous=Normal; journal Mode={1};</value>
    <comment>{0}:DBファイル名
{1}:ジャーナルモード</comment>
  </data>
  <data name="CountAllSql" xml:space="preserve">
    <value>Count(*)</value>
  </data>
  <data name="CountSql" xml:space="preserve">
    <value>Count(CASE WHEN {0} THEN 1 ELSE NULL END)</value>
    <comment>{0}:条件</comment>
  </data>
  <data name="CreateTableSql" xml:space="preserve">
    <value>CREATE TABLE {0} {1}</value>
    <comment>{0}:テーブル名
{1}:列データ</comment>
  </data>
  <data name="DateTimeSql" xml:space="preserve">
    <value>datetime({0})</value>
    <comment>{0}:フィールド or 日付文字列</comment>
  </data>
  <data name="DeleteColumnSql" xml:space="preserve">
    <value>ALTER TABLE {0} DROP COLUMN {1}</value>
    <comment>{0}:テーブル名
{1}:列名</comment>
  </data>
  <data name="DeleteSql" xml:space="preserve">
    <value>DELETE FROM {0} {1}</value>
    <comment>{0}:テーブル名
{1}:条件式</comment>
  </data>
  <data name="DropTableSql" xml:space="preserve">
    <value>DROP TABLE {0}</value>
    <comment>{0}:テーブル名</comment>
  </data>
  <data name="GetFieldsSql" xml:space="preserve">
    <value>PRAGMA table_info({0});</value>
    <comment>{0}:テーブル名</comment>
  </data>
  <data name="InsertSql" xml:space="preserve">
    <value>INSERT INTO {0} {1} VALUES ({2})</value>
    <comment>{0}:テーブル名
{1}:挿入先フィールド
{2}:挿入する値</comment>
  </data>
  <data name="RollbackTransactionSql" xml:space="preserve">
    <value>ROLLBACK TRANSACTION {0}</value>
    <comment>{0}:トランザクション名</comment>
  </data>
  <data name="SelectSql" xml:space="preserve">
    <value>SELECT {0} FROM {1} {2}</value>
    <comment>{0}: 表示する列・データ
{1}: テーブル名</comment>
  </data>
  <data name="SelectTableAndViewSql" xml:space="preserve">
    <value>SELECT DISTINCT(name) FROM sqlite_master WHERE type = 'view' OR type = 'table' order by name;</value>
  </data>
  <data name="SelectTableSql" xml:space="preserve">
    <value>SELECT DISTINCT(name) FROM sqlite_master WHERE type = 'table' order by name;</value>
  </data>
  <data name="SelectViewSql" xml:space="preserve">
    <value>SELECT DISTINCT(name) FROM sqlite_master WHERE type = 'view' order by name;</value>
  </data>
  <data name="strftimeSql" xml:space="preserve">
    <value>strftime({0}, {1} {2})</value>
    <comment>{0}:形式
{1}:日付文
{2}:修飾子</comment>
  </data>
  <data name="SumSql" xml:space="preserve">
    <value>SUM({0})</value>
    <comment>{0}:フィールド名</comment>
  </data>
  <data name="UpdateSql" xml:space="preserve">
    <value>UPDATE {0} SET {1} {2}</value>
    <comment>{0}:テーブル名
{1}:置き換えるデータ
{2}:条件</comment>
  </data>
  <data name="WhereSql" xml:space="preserve">
    <value>WHERE {0}</value>
    <comment>{0}:条件式</comment>
  </data>
  <data name="UpdateSqlForUpdateInventoryNotEqual" xml:space="preserve">
    <value>Update {0} SET {1} = Cast({2} As TEXT) || '(' || CASE WHEN ({2} - {3}) &gt;= 0 THEN '+' ELSE '' END || Cast({2} - {3} As TEXT) || ')' WHERE {2} != {3}</value>
    <comment>{0}:テーブル名
{1}:履歴列名
{2}:実棚数列名
{3}:理論在庫列名</comment>
  </data>
  <data name="UpdateSqlForUpdateInventoryEqual" xml:space="preserve">
    <value>Update {0} SET {1} = {2} WHERE {2} = {3}</value>
    <comment>{0}:テーブル名
{1}:履歴列名
{2}:実棚数列名
{3}:理論在庫列名</comment>
  </data>
  <data name="CreateGroupSumTempTable" xml:space="preserve">
    <value>CREATE TEMP TABLE {0} AS SELECT {1}, {2} FROM {3} WHERE {4} GROUP BY {1}</value>
    <comment>{0}:一時テーブル名
{1}:キー列群　"key1, key2, ..."
{2}:合計列群　"SUM(a), SUM(b),..."
{3}:ログテーブル名
{4}:条件文</comment>
  </data>
  <data name="CreateNewDataTempTable" xml:space="preserve">
    <value>CREATE TEMP TABLE {0} AS SELECT {1}, {2} FROM {3} WHERE {4} GROUP BY {1} HAVING ROWID = MAX(ROWID)</value>
    <comment>{0}:一時テーブル名
{1}:キー列群　"key1, key2, ..."
{2}:合計列群　"a, b, ..."
{3}:ログテーブル名
{4}:条件文</comment>
  </data>
  <data name="SetSqlForLogUpdate" xml:space="preserve">
    <value>{0} = {1} ({2})</value>
    <comment>{0}:マスタの書き換え先　value
{1}:加算等のため  "value +" 等
{2}:SELECT文（SelectSqlForLogUpdate）</comment>
  </data>
  <data name="AttachSql" xml:space="preserve">
    <value>ATTACH '{0}' As {1}</value>
    <comment>{0}:ファイルパス
{1}:名前</comment>
  </data>
  <data name="ExistsSql" xml:space="preserve">
    <value>EXISTS ({0})</value>
  </data>
  <data name="IsNullSql" xml:space="preserve">
    <value>{0} IS NULL</value>
    <comment>{0}:列名</comment>
  </data>
  <data name="ResultColumnName" xml:space="preserve">
    <value>Result</value>
    <comment>結果列名</comment>
  </data>
  <data name="SelectSqlForLogUpdate" xml:space="preserve">
    <value>SELECT {0} FROM {1} WHERE {2}</value>
    <comment>{0}:一時テーブルの書き換え元　temp.value
{1}:一時テーブル名　temp
{2}:キーの一致条件　master.key1 = temp.key1, master.key2 = temp.key2</comment>
  </data>
  <data name="ImportCommand" xml:space="preserve">
    <value>-csv -separator {3} "{0}" ".import {1} {2}"</value>
    <comment>{0}:挿入先DBファイル名
{1}:読み込むファイル名
{2}:挿入先テーブル名
{3}:区切り文字</comment>
  </data>
  <data name="LogRetransmissionCondition" xml:space="preserve">
    <value>{0} = '{1}' OR {0} = '{2}'</value>
    <comment>{0}:マスタ更新結果列名
{1}:NG文字列
{2}:Skip文字列</comment>
  </data>
  <data name="NotSql" xml:space="preserve">
    <value>NOT ({0})</value>
    <comment>{0}:条件式</comment>
  </data>
  <data name="CastToRealSql" xml:space="preserve">
    <value>Cast({0} As REAL)</value>
    <comment>{0}:式</comment>
  </data>
  <data name="ImportColumnExceedanceError" xml:space="preserve">
    <value>extras ignored</value>
  </data>
  <data name="ImportDuplicationError" xml:space="preserve">
    <value>UNIQUE constraint failed</value>
  </data>
  <data name="SelectSqlForCalculationLabel" xml:space="preserve">
    <value>SELECT {0} FROM ({1})</value>
    <comment>{0}:表示列
{1}:SELECT文</comment>
  </data>
  <data name="InsertSelectSql" xml:space="preserve">
    <value>INSERT INTO {0} ({1}) {2}</value>
    <comment>{0}:テーブル名
{1}:挿入するフィールド
{2}:SELECT文</comment>
  </data>
  <data name="UpdateSqlForUpdateInventoryNull" xml:space="preserve">
    <value>Update {0} SET {1} = Cast({2} As TEXT) || '(' || CASE WHEN {2} &gt;= 0 THEN '+' ELSE '' END || Cast({2} As TEXT) || ')' WHERE {3} IS NULL</value>
    <comment>{0}:テーブル名
{1}:履歴列名
{2}:実棚数列名
{3}:理論在庫列名</comment>
  </data>
  <data name="DateTimeCalculationSql" xml:space="preserve">
    <value>datetime({0}, '{1}')</value>
    <comment>{0}:フィールド or 日付文字列
{1}:Modifier</comment>
  </data>
  <data name="ExportCommand" xml:space="preserve">
    <value>-csv -separator {2} "{0}" "SELECT * FROM {1}"</value>
    <comment>{0}:DBファイル名
{1}:テーブル名
{2}:区切り文字</comment>
  </data>
  <data name="GetTableSchemaSql" xml:space="preserve">
    <value>SELECT sql FROM sqlite_master WHERE TYPE ='table' AND name = '{0}'</value>
    <comment>{0}:テーブル名</comment>
  </data>
  <data name="WalCommitCommand" xml:space="preserve">
    <value>"{0}" "PRAGMA wal_checkpoint"</value>
    <comment>{0}:DBファイル名</comment>
  </data>
  <data name="SQLite3ExitCommand" xml:space="preserve">
    <value>.exit</value>
  </data>
  <data name="SQLite3ImportCommand" xml:space="preserve">
    <value>.import "{0}" "{1}"</value>
    <comment>{0}:インポートファイル
{1}:テーブル名</comment>
  </data>
  <data name="SQLite3SeparatorCommand" xml:space="preserve">
    <value>.separator "{0}"</value>
    <comment>{0}:区切り文字</comment>
  </data>
  <data name="CreateIndexSql" xml:space="preserve">
    <value>CREATE INDEX {1} ON {0}({1});</value>
    <comment>{0}:テーブル名
{1}:フィールド名</comment>
  </data>
</root>
