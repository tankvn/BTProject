
#insert "\Lib\Utilities\BtMasterCheckUtilityConstants"

Package BtMasterCheckUtility

    #define FIELD_NAME_PREFIX "field" 

    #define VOUCHER_COLUMN_TYPE DB_ACCESS_SQLITE_DATA_TYPE_TEXT 

    Const ITEMKEYS_COLUMN_NUMBER[BT_MASTER_CHECK_UTILITY_MAX_ITEM_KEY_NUM] = {1, 2, 3, 4}

    #define ITEMKEYS_COLUMN_TYPE DB_ACCESS_SQLITE_DATA_TYPE_TEXT 

    #define ORDERCOUNT_COLUMN_TYPE DB_ACCESS_SQLITE_DATA_TYPE_INTEGER 

    #define PROCESSEDCOUNT_COLUMN_TYPE DB_ACCESS_SQLITE_DATA_TYPE_INTEGER 

    #define SENTCOUNT_COLUMN_TYPE DB_ACCESS_SQLITE_DATA_TYPE_INTEGER 

    #define REALTIME_USERMASTER_FILENAME "__RealTimeMasterFile.pkdat" 

    #define REALTIME_STRAGE_DESTINATION STORAGE_DESTINATION_DRIVE2 

    #define COUNT_FIELD_NAME "0" 

    _listId_MasterFileFieldsInformation = INVALID_LIST_TABLE_ID



    Method OpenDatabase(logFilePath, masterFilePath) /*As Boolean*/
        errorMessage
    Begin

        DbAccess:Open(logFilePath, masterFilePath, BT_MASTER_CHECK_UTILITY_SUB_DATABASE_ALIAS)
        errorMessage = ErrorManager:GetError()
        If (errorMessage ne MESSAGE_ERROR_NONE) Then
            MessageUtility:ShowMessageOk(errorMessage)
            Return (false)
        End If

        If Not CreateMasterFileWhenNotExistFile(logFilePath, masterFilePath) Then
            MessageUtility:ShowMessageOk(MESSAGE_ERROR_CREATE_TABLE)
            Return (false)
        End If

        Return (true)
    End Method

    Method GetRealTimeMasterFilePath() /*As String*/
    Begin
        Return (PathUtility:Combine(PathUtility:StorageTypeToPath(REALTIME_STRAGE_DESTINATION), REALTIME_USERMASTER_FILENAME))
    End Method

    Method GetMasterFileFieldsInformation() /*As FieldTypePair()*/
        i
        itemFieldName
    Begin
        If _listId_MasterFileFieldsInformation == INVALID_LIST_TABLE_ID Then
            _listId_MasterFileFieldsInformation = ListTable:CreateList()
            itemFieldName = FIELD_NAME_PREFIX & (BT_MASTER_CHECK_UTILITY_VOUCHER_COLUMN_NUMBER + 1)
            ListTable:Add(_listId_MasterFileFieldsInformation, itemFieldName, VOUCHER_COLUMN_TYPE)
            For i = 0 to ITEMKEYS_COLUMN_NUMBER.size - 1
                itemFieldName = FIELD_NAME_PREFIX & (ITEMKEYS_COLUMN_NUMBER[i] + 1)
                ListTable:Add(_listId_MasterFileFieldsInformation, itemFieldName, ITEMKEYS_COLUMN_TYPE)
            Next
            itemFieldName = FIELD_NAME_PREFIX & (BT_MASTER_CHECK_UTILITY_ORDERCOUNT_COLUMN_NUMBER + 1)
            ListTable:Add(_listId_MasterFileFieldsInformation, itemFieldName, ORDERCOUNT_COLUMN_TYPE)
            itemFieldName = FIELD_NAME_PREFIX & (BT_MASTER_CHECK_UTILITY_PROCESSEDCOUNT_COLUMN_NUMBER + 1)
            ListTable:Add(_listId_MasterFileFieldsInformation, itemFieldName, PROCESSEDCOUNT_COLUMN_TYPE)
            itemFieldName = FIELD_NAME_PREFIX & (BT_MASTER_CHECK_UTILITY_SENTCOUNT_COLUMN_NUMBER + 1)
            ListTable:Add(_listId_MasterFileFieldsInformation, itemFieldName, SENTCOUNT_COLUMN_TYPE)
        End If
        Return (_listId_MasterFileFieldsInformation)
    End Method

    Method CreateMasterFileWhenNotExistFile(logFilePath, masterFilePath) /*As Boolean*/
        i
        listId_TableFieldTypePairs
        listId_IndexFields
        indexName
        listId_Fields
    Begin

        If PathUtility:IsFileExist(masterFilePath) Then
            If IsValidMasterFileField(logFilePath, masterFilePath) Then
                Return (true)
            End If

            DbAccess:DropTable(masterFilePath, TERMINAL_SETTING_MASTER_CHECK_TABLE_NAME)
            If (ErrorManager:GetError() ne MESSAGE_ERROR_NONE) Then
                Return (false)
            End If
        End If

        listId_TableFieldTypePairs = GetMasterFileFieldsInformation()
        listId_IndexFields = ListTable:CreateList()
        ListTable:Add(listId_IndexFields, "", ListTable:Get(listId_TableFieldTypePairs, BT_MASTER_CHECK_UTILITY_VOUCHER_COLUMN_NUMBER, "key"))
        For i = 0 to ITEMKEYS_COLUMN_NUMBER.size - 1
            ListTable:Add(listId_IndexFields, "", ListTable:Get(listId_TableFieldTypePairs, ITEMKEYS_COLUMN_NUMBER[i], "key"))
        Next

        DbAccess:CreateTable(masterFilePath, TERMINAL_SETTING_MASTER_CHECK_TABLE_NAME, listId_TableFieldTypePairs)
        If (ErrorManager:GetError() ne MESSAGE_ERROR_NONE) Then
            ListTable:DeleteList(listId_IndexFields)
            Return (false)
        End If

        For i = 0 to ListTable:Count(listId_IndexFields) - 1
            indexName = ListTable:Get(listId_IndexFields, i, "val")
            listId_Fields = ListTable:CreateList()
            ListTable:Add(listId_Fields, "", indexName)
            DbAccess:CreateIndex(masterFilePath, TERMINAL_SETTING_MASTER_CHECK_TABLE_NAME, indexName, listId_Fields)
            ListTable:DeleteList(listId_Fields)
            If (ErrorManager:GetError() ne MESSAGE_ERROR_NONE) Then
                ListTable:DeleteList(listId_IndexFields)
                Return (false)
            End If
        Next
        ListTable:DeleteList(listId_IndexFields)
        Return (true)
    End Method

    Method IsValidMasterFileField(logFilePath, masterFilePath) /*As Boolean*/
        i
        listId_TableFieldTypePairs
        listId_FieldInfoList
        field1
        field2
    Begin

        listId_TableFieldTypePairs = GetMasterFileFieldsInformation()

        listId_FieldInfoList = DbAccess:GetFieldInfo(logFilePath, TERMINAL_SETTING_MASTER_CHECK_TABLE_NAME)

        If (ListTable:Count(listId_TableFieldTypePairs) <> ListTable:Count(listId_FieldInfoList)) Then
            ListTable:DeleteList(listId_FieldInfoList)
            Return (false)
        End If

        For i = 0 to ListTable:Count(listId_TableFieldTypePairs) - 1
            If (ListTable:Get(listId_TableFieldTypePairs, i, "key") ne ListTable:Get(listId_FieldInfoList, i, "key")) Then
                ListTable:DeleteList(listId_FieldInfoList)
                Return (false)
            End If
            field1 = StringUtility:ToUpper(ListTable:Get(listId_TableFieldTypePairs, i, "val"))
            field2 = StringUtility:ToUpper(ListTable:Get(listId_FieldInfoList, i, "val"))
            If (field1 ne field2) Then
                ListTable:DeleteList(listId_FieldInfoList)
                Return (false)
            End If
        Next
        ListTable:DeleteList(listId_FieldInfoList)

        Return (true)
    End Method

    Method UpdateMasterFileByRealTime(commErrorDisplayMode, listId_Vouchers, listId_UserMasterDataInfo, logFilePath, clearExistingList, parentWindow)
        i
        voucherFieldOfSelected
        itemKeysFieldOfSelected[BT_MASTER_CHECK_UTILITY_MAX_ITEM_KEY_NUM]
        orderNumFieldOfSelected
        processedNumFieldOfSelected
        listId_SelectFieldIndexes
        listId_ItemKeyFieldIndexes
        listId_SearchRecords = INVALID_LIST_TABLE_ID
        listId_FieldValuePairs
        masterFilePath
        deleteErrorMessage
        insertErrorMessage
        row
        listId_Record = INVALID_LIST_TABLE_ID
        listId_Col
        voucherValue
        itemKeyValue
        orderCountValue
        processedCountValue
    Begin

        voucherFieldOfSelected = -1
        For i = 0 to BT_MASTER_CHECK_UTILITY_MAX_ITEM_KEY_NUM - 1
            itemKeysFieldOfSelected[i] = -1
        Next
        orderNumFieldOfSelected = -1
        processedNumFieldOfSelected = -1

        listId_SelectFieldIndexes = ListTable:CreateList()
        If 0 <= ListTable:GetValue(listId_UserMasterDataInfo, "VoucherFieldIndex") Then
            ListTable:Add(listId_SelectFieldIndexes, ListTable:GetValue(listId_UserMasterDataInfo, "VoucherFieldIndex"), "")
            voucherFieldOfSelected = ListTable:Count(listId_SelectFieldIndexes) - 1
        End If
        For i = 0 to BT_MASTER_CHECK_UTILITY_MAX_ITEM_KEY_NUM - 1
            listId_ItemKeyFieldIndexes = ListTable:GetValue(listId_UserMasterDataInfo, "ItemKeysFieldIndex")
            If 0 <= ListTable:Get(listId_ItemKeyFieldIndexes, i, "key") Then
                ListTable:Add(listId_SelectFieldIndexes, ListTable:Get(listId_ItemKeyFieldIndexes, i, "key"), "")
                itemKeysFieldOfSelected[i] = ListTable:Count(listId_SelectFieldIndexes) - 1
            End If
        Next
        If 0 <= ListTable:GetValue(listId_UserMasterDataInfo, "OrderNumFieldIndex") Then
            ListTable:Add(listId_SelectFieldIndexes, ListTable:GetValue(listId_UserMasterDataInfo, "OrderNumFieldIndex"), "")
            orderNumFieldOfSelected = ListTable:Count(listId_SelectFieldIndexes) - 1
        End If
        If 0 <= ListTable:GetValue(listId_UserMasterDataInfo, "ProcessedNumFieldIndex") Then
            ListTable:Add(listId_SelectFieldIndexes, ListTable:GetValue(listId_UserMasterDataInfo, "ProcessedNumFieldIndex"), "")
            processedNumFieldOfSelected = ListTable:Count(listId_SelectFieldIndexes) - 1
        End If

        listId_SearchRecords = GetMasterFileByRealTime(commErrorDisplayMode, listId_Vouchers, ListTable:GetValue(listId_UserMasterDataInfo, "UserMasterTableName"), listId_SelectFieldIndexes, ListTable:GetValue(listId_UserMasterDataInfo, "VoucherFieldIndex"), parentWindow)
        ListTable:DeleteList(listId_SelectFieldIndexes)
        If ErrorManager:GetCommunicationError() Then
            If (listId_SearchRecords <> INVALID_LIST_TABLE_ID) Then
                ListTable:DeleteList(listId_SearchRecords)
            End If
            ErrorManager:SetCommunicationError()
            Return (nil)
        End If

        If (listId_SearchRecords == INVALID_LIST_TABLE_ID) Then
            Return (nil)
        End If

        masterFilePath = GetRealTimeMasterFilePath()

        If (OpenDatabase(logFilePath, masterFilePath) is false) Then
            MessageUtility:ShowMessageOk(MESSAGE_ERROR_OPEN_DB)
            ListTable:DeleteList(listId_SearchRecords)
            Return (nil)
        End If

        If clearExistingList Then
            listId_FieldValuePairs = ListTable:CreateList()
            DbAccess:DeleteRecordWithCacheOption(logFilePath, TERMINAL_SETTING_MASTER_CHECK_TABLE_NAME, listId_FieldValuePairs, true)
            ListTable:DeleteList(listId_FieldValuePairs)
        Else
            For i = 0 to ListTable:Count(listId_Vouchers) - 1
                listId_FieldValuePairs = ListTable:CreateList()
                ListTable:Add(listId_FieldValuePairs, FIELD_NAME_PREFIX & (BT_MASTER_CHECK_UTILITY_VOUCHER_COLUMN_NUMBER + 1), ListTable:Get(listId_Vouchers, i, "key"))
                DbAccess:DeleteRecordWithCacheOption(logFilePath, TERMINAL_SETTING_MASTER_CHECK_TABLE_NAME, listId_FieldValuePairs, true)
                ListTable:DeleteList(listId_FieldValuePairs)
            Next
        End If

        deleteErrorMessage = ErrorManager:GetError()
        If (deleteErrorMessage ne MESSAGE_ERROR_NONE) Then
            MessageUtility:ShowMessageOk(deleteErrorMessage)
            ListTable:DeleteList(listId_SearchRecords)
            Return (nil)
        End If

        For row = 0 to ListTable:Count(listId_SearchRecords) - 1

            listId_Record = ListTable:CreateList()

            listId_Col = ListTable:Get(listId_SearchRecords, row, "val")
            voucherValue = ""
            If (listId_Col <> INVALID_LIST_TABLE_ID) And (0 <= voucherFieldOfSelected) And (voucherFieldOfSelected < ListTable:Count(listId_Col)) Then
                voucherValue = ListTable:Get(listId_Col, voucherFieldOfSelected, "val")
            End If
            ListTable:Add(listId_Record, FIELD_NAME_PREFIX & (BT_MASTER_CHECK_UTILITY_VOUCHER_COLUMN_NUMBER + 1), voucherValue)

            For i = 0 to BT_MASTER_CHECK_UTILITY_MAX_ITEM_KEY_NUM - 1
                itemKeyValue = ""
                If (listId_Col <> INVALID_LIST_TABLE_ID) And (0 <= itemKeysFieldOfSelected[i]) And (itemKeysFieldOfSelected[i] < ListTable:Count(listId_Col)) Then
                    itemKeyValue = ListTable:Get(listId_Col, itemKeysFieldOfSelected[i], "val")
                End If
                ListTable:Add(listId_Record, FIELD_NAME_PREFIX & (ITEMKEYS_COLUMN_NUMBER[i] + 1), itemKeyValue)
            Next

            orderCountValue = ""
            If (listId_Col <> INVALID_LIST_TABLE_ID) And (0 <= orderNumFieldOfSelected) And (orderNumFieldOfSelected < ListTable:Count(listId_Col)) Then
                orderCountValue = ListTable:Get(listId_Col, orderNumFieldOfSelected, "val")
            End If
            ListTable:Add(listId_Record, FIELD_NAME_PREFIX & (BT_MASTER_CHECK_UTILITY_ORDERCOUNT_COLUMN_NUMBER + 1), orderCountValue)

            processedCountValue = ""
            If (listId_Col <> INVALID_LIST_TABLE_ID) And (0 <= processedNumFieldOfSelected) And (processedNumFieldOfSelected < ListTable:Count(listId_Col)) Then
                processedCountValue = ListTable:Get(listId_Col, processedNumFieldOfSelected, "val")
            End If
            ListTable:Add(listId_Record, FIELD_NAME_PREFIX & (BT_MASTER_CHECK_UTILITY_PROCESSEDCOUNT_COLUMN_NUMBER + 1), processedCountValue)

            ListTable:Add(listId_Record, FIELD_NAME_PREFIX & (BT_MASTER_CHECK_UTILITY_SENTCOUNT_COLUMN_NUMBER + 1), "0")

            DbAccess:InsertRecordWithCacheOption(logFilePath, TERMINAL_SETTING_MASTER_CHECK_TABLE_NAME, listId_Record, true)
            ListTable:DeleteList(listId_Record)
            insertErrorMessage = ErrorManager:GetError()
            If (insertErrorMessage ne MESSAGE_ERROR_NONE) Then
                MessageUtility:ShowMessageOk(insertErrorMessage)
                ListTable:DeleteList(listId_SearchRecords)
                Return (nil)
            End If
        Next

        ListTable:DeleteList(listId_SearchRecords)
    End Method

    Method GetMasterFileByRealTime(commErrorDisplayMode, listId_Vouchers, userMasterTableName, listId_SelectFieldIndexes, voucherFieldIndex, parentWindow) /*As DataTable*/
        i
        commErrorDispMode
        listId_Conditions
        listId_ConditionCollection = INVALID_LIST_TABLE_ID
        listId_IndexValues = INVALID_LIST_TABLE_ID
        listId_IndexValuePair = INVALID_LIST_TABLE_ID
        listId_SearchRecords = INVALID_LIST_TABLE_ID
    Begin

        commErrorDispMode = commErrorDisplayMode
        If (commErrorDispMode == COMMUNICATION_ERROR_DISPLAY_MODE_TERMINAL_SETTING) Then
            commErrorDispMode = TERMINAL_SETTING_REALTIME_DISPLAY_ERROR_SCREEN
        End If

        listId_ConditionCollection = ListTable:CreateList()
        ListTable:Add(listId_ConditionCollection, "IsOrCondition", true)

        If 0 <= voucherFieldIndex Then
            listId_IndexValues = ListTable:CreateList()
            For i = 0 to ListTable:Count(listId_Vouchers) - 1
                listId_IndexValuePair = ListTable:CreateList()
                ListTable:Add(listId_IndexValuePair, "Index", voucherFieldIndex)
                ListTable:Add(listId_IndexValuePair, "Value", ListTable:Get(listId_Vouchers, i, "key"))
                ListTable:Add(listId_IndexValuePair, "MatchType", FILTERING_MATCH_TYPE_EXACT_MATCH)
                ListTable:AddList(listId_IndexValues, i, listId_IndexValuePair)
            Next
            ListTable:AddList(listId_ConditionCollection, "IndexValueList", listId_IndexValues)
        End If

        listId_Conditions = ListTable:CreateList()
        ListTable:AddList(listId_Conditions, "0", listId_ConditionCollection)

        RealTimeConnectionController:New()
        listId_SearchRecords = RealTimeConnectionController:SelectMultiple("", userMasterTableName, listId_SelectFieldIndexes, listId_Conditions, -1, parentWindow)
        ListTable:DeleteList(listId_Conditions)

        If ErrorManager:GetCommunicationError() Then
            If (commErrorDispMode <> COMMUNICATION_ERROR_DISPLAY_MODE_NEVER) Then
                ErrorManager:SetCommunicationError()
            End If
            If (listId_SearchRecords <> INVALID_LIST_TABLE_ID) Then
                ListTable:DeleteList(listId_SearchRecords)
            End If
            Return (INVALID_LIST_TABLE_ID)
        End If

        Return (listId_SearchRecords)

    End Method

    Method HasUnsentData(logFilePath, logTableName, logVoucherFieldName, masterFilePath, useVoucher) /*As Boolean*/
        listId_Vouchers = INVALID_LIST_TABLE_ID
        listId_TableFieldTypePairs
        index
        condition
        errorMessage
    Begin

        If (Not DbAccess:HasTable(logFilePath, logTableName)) Then
            Return (false)
        End If

        If (Not OpenDatabase(logFilePath, masterFilePath)) Then
            Return (false)
        End If

        If useVoucher Then
            listId_TableFieldTypePairs = GetMasterFileFieldsInformation()

            listId_Vouchers = GetVouchersInMasterFile(logFilePath, ListTable:Get(listId_TableFieldTypePairs, BT_MASTER_CHECK_UTILITY_VOUCHER_COLUMN_NUMBER, "key"))
            errorMessage = ErrorManager:GetError()
            If (errorMessage ne MESSAGE_ERROR_NONE) Then
                ErrorManager:SetError(errorMessage)
                If (listId_Vouchers <> INVALID_LIST_TABLE_ID) Then
                    ListTable:DeleteList(listId_Vouchers)
                End If
                Return (false)
            End If
            If (listId_Vouchers == INVALID_LIST_TABLE_ID) Then
                Return (false)
            End If

            For index = 0 to ListTable:Count(listId_Vouchers) - 1
                condition = "WHERE " & DbAccess:EncloseDoubleQuotations(logVoucherFieldName) & " = " & DbAccess:EncloseDoubleQuotations(ListTable:Get(listId_Vouchers, index, "key"))
                If HasJobData(logFilePath, logTableName, condition) Then
                    ListTable:DeleteList(listId_Vouchers)
                    Return (true)
                End If
            Next
            ListTable:DeleteList(listId_Vouchers)
        Else
            Return (HasJobData(logFilePath, logTableName, ""))
        End If

    Catch
        ErrorManager:SetError(System:error)
        If (listId_Vouchers <> INVALID_LIST_TABLE_ID) Then
            ListTable:DeleteList(listId_Vouchers)
        End If
        Return (false)
    End Method

    Method GetVouchersInMasterFile(logFilePath, masterVoucherFieldName) /*As List(Of String)*/
        listId_Vouchers = INVALID_LIST_TABLE_ID
        listId_FieldTypePairs = INVALID_LIST_TABLE_ID
        listId_Data
        listId_Col
        index
        sql
        errorMessage
    Begin
        sql = "SELECT DISTINCT " & DbAccess:EncloseDoubleQuotations(masterVoucherFieldName) & " FROM "
                                          & BT_MASTER_CHECK_UTILITY_SUB_DATABASE_ALIAS & "." & DbAccess:EncloseDoubleQuotations(TERMINAL_SETTING_MASTER_CHECK_TABLE_NAME)
        listId_FieldTypePairs = ListTable:CreateList()
        ListTable:Add(listId_FieldTypePairs, masterVoucherFieldName, DB_ACCESS_SQLITE_DATA_TYPE_TEXT)

        listId_Data = DbAccess:ExecuteQueryTypeSql(logFilePath, sql, listId_FieldTypePairs)
        ListTable:DeleteList(listId_FieldTypePairs)
        listId_FieldTypePairs = INVALID_LIST_TABLE_ID
        errorMessage = ErrorManager:GetError()
        If (errorMessage ne MESSAGE_ERROR_NONE) Then
            ErrorManager:SetError(errorMessage)
            If (listId_Data <> INVALID_LIST_TABLE_ID) Then
                ListTable:DeleteList(listId_Data)
            End If
            Return (INVALID_LIST_TABLE_ID)
        End If
        If (listId_Data == INVALID_LIST_TABLE_ID) Then Return(INVALID_LIST_TABLE_ID) End If

        listId_Vouchers = ListTable:CreateList()
        For index = 0 to ListTable:Count(listId_Data) - 1
            listId_Col = ListTable:Get(listId_Data, index, "val")
            ListTable:Add(listId_Vouchers, ListTable:Get(listId_Col, 0, "val"), "")
        Next
        ListTable:DeleteList(listId_Data)
        Return (listId_Vouchers)
    Catch
        ErrorManager:SetError(System:error)
        If (listId_Vouchers <> INVALID_LIST_TABLE_ID) Then
            ListTable:DeleteList(listId_Vouchers)
        End If
        If (listId_FieldTypePairs <> INVALID_LIST_TABLE_ID) Then
            ListTable:DeleteList(listId_FieldTypePairs)
        End If
        If (listId_Data <> INVALID_LIST_TABLE_ID) Then
            ListTable:DeleteList(listId_Data)
        End If
        Return (INVALID_LIST_TABLE_ID)
    End Method

    Method HasJobData(logFilePath, logTableName, condition) /*As Boolean*/
        sql
        listId_FieldTypePairs
        listId_Data
        listId_Col
        errorMessage
        recordCount
    Begin
        sql = "SELECT COUNT(*) FROM " & DbAccess:EncloseDoubleQuotations(logTableName) &  " " & condition
        listId_FieldTypePairs = ListTable:CreateList()
        ListTable:Add(listId_FieldTypePairs, COUNT_FIELD_NAME, DB_ACCESS_SQLITE_DATA_TYPE_INTEGER)
        listId_Data = DbAccess:ExecuteQueryTypeSql(logFilePath, sql, listId_FieldTypePairs)
        ListTable:DeleteList(listId_FieldTypePairs)
        errorMessage = ErrorManager:GetError()
        If (errorMessage ne MESSAGE_ERROR_NONE) Then
            ErrorManager:SetError(errorMessage)
            If (listId_Data <> INVALID_LIST_TABLE_ID) Then
                ListTable:DeleteList(listId_Data)
            End If
            Return (false)
        End If
        If (listId_Data == INVALID_LIST_TABLE_ID) Then Return(false) End If

        listId_Col = ListTable:Get(listId_Data, 0, "val")
        recordCount = ListTable:Get(listId_Col, 0, "val")
        ListTable:DeleteList(listId_Data)
        Return ((0 < recordCount))
    End Method


End Package
